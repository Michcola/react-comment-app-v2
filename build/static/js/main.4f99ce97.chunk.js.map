{"version":3,"sources":["CommentInput.js","Comment.js","CommentList.js","CommentApp.js","index.js"],"names":["CommentInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","content","textarea","focus","event","_saveUsername","target","value","_loadUsername","localStorage","getItem","setState","setItem","props","onSubmit","createdTime","Date","_this2","react_default","a","createElement","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","Comment","timeString","_updateTimeString","_timer","setInterval","comment","duration","now","concat","Math","round","max","onDeleteComment","index","clearInterval","replace","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","comments","map","i","src_Comment","key","defaultProps","CommentApp","_loadComments","JSON","parse","stringify","alert","push","_saveComments","splice","src_CommentInput","handleSubmitComment","src_CommentList","ReactDOM","render","src_CommentApp","document","getElementById"],"mappings":"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","file":"static/js/main.4f99ce97.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\nclass CommentInput extends Component{\r\n    static propTypes = {\r\n        onSubmit:PropTypes.func\r\n    }\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            username:'',\r\n            content:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.textarea.focus()\r\n    }\r\n    handleUsernameBlur(event){\r\n        this._saveUsername(event.target.value)\r\n    }\r\n\r\n    componentWillMount(){\r\n        this._loadUsername()\r\n    }\r\n    _loadUsername(){      \r\n        const username = localStorage.getItem('username')\r\n        if(username){\r\n            this.setState({username})\r\n        }\r\n    }\r\n    _saveUsername(username){\r\n        localStorage.setItem('username',username)\r\n    }\r\n    handleUsernameChange(event){\r\n        this.setState({\r\n            username:event.target.value\r\n        })\r\n    }\r\n    handleContentChange(event){\r\n        this.setState({\r\n            content:event.target.value\r\n        })\r\n    }\r\n    handleSubmit(){\r\n        if(this.props.onSubmit){\r\n            this.props.onSubmit({\r\n                username:this.state.username,\r\n                content:this.state.content,\r\n                createdTime:+new Date()\r\n            })\r\n        }\r\n        this.setState({content:''})\r\n    }\r\n \r\n    render(){\r\n        return (\r\n            <div className=\"comment-input\">\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">用户名 :</span> \r\n                    <div className=\"comment-field-input\">\r\n                        <input \r\n                        onBlur={this.handleUsernameBlur.bind(this)}\r\n                        value={this.state.username}\r\n                        onChange={this.handleUsernameChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field\">\r\n                    <span className=\"comment-field-name\">评论内容 :</span>\r\n                    <div className=\"comment-field-input\">\r\n                        <textarea  \r\n                        ref={(textarea)=>this.textarea=textarea}\r\n                        value={this.state.content}\r\n                        onChange={this.handleContentChange.bind(this)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"comment-field-button\">\r\n                    <button \r\n                    onClick={this.handleSubmit.bind(this)}\r\n                    >\r\n                        发布\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentInput","import React,{Component} from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass Comment extends Component{\r\n    static propTypes={\r\n        comment:PropTypes.object.isRequired,\r\n        index:PropTypes.number,\r\n        onDeleteComments:PropTypes.func\r\n    }\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={timeString:''}\r\n    }\r\n    componentWillMount(){\r\n        this._updateTimeString()\r\n        this._timer=setInterval(\r\n            this._updateTimeString.bind(this),\r\n            1000\r\n        )\r\n    }\r\n    _updateTimeString(){\r\n        const comment = this.props.comment\r\n        const duration = (+Date.now() - comment.createdTime)/1000\r\n        this.setState({\r\n            timeString:duration>60\r\n            ?`${Math.round(duration/60)} 分钟前`\r\n            :`${Math.round(Math.max(duration,1))} 秒前`\r\n        })\r\n    }\r\n    handleDeleteComment(){\r\n        if(this.props.onDeleteComment){\r\n            this.props.onDeleteComment(this.props.index)\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this._timer)\r\n    }\r\n    _getProcessedContent(content){\r\n        return content\r\n        .replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/'/g, \"&#039;\")\r\n        .replace(/`([\\S\\s]+?)`/g, '<code>$1</code>')\r\n    }\r\n    render(){\r\n        const {comment} = this.props\r\n        return (\r\n            <div className='comment'>\r\n                <div className=\"comment-user\">\r\n                    <span className=\"comment-username\">\r\n                    {comment.username}\r\n                    </span>\r\n                     <b>:</b>  \r\n                </div>\r\n                <p dangerouslySetInnerHTML={{\r\n                    __html:this._getProcessedContent(comment.content)\r\n                }} />\r\n                <span className='comment-createdtime'>\r\n                    {this.state.timeString}\r\n                </span>\r\n                <span \r\n                onClick={this.handleDeleteComment.bind(this)}\r\n                className='comment-delete'>\r\n                    删除\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Comment","import React,{Component} from 'react'\r\nimport Comment from './Comment'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass CommentList extends Component{\r\n    static propTypes = {\r\n        onDeleteComment:PropTypes.func,\r\n        comments:PropTypes.array\r\n    }\r\n    static defaultProps={\r\n        comments:[]\r\n    }\r\n    handleDeleteComment(index){\r\n        if(this.props.onDeleteComment){\r\n            this.props.onDeleteComment(index)\r\n        }\r\n    }\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                {this.props.comments.map((comment,i)=>\r\n                <Comment \r\n                onDeleteComment={this.handleDeleteComment.bind(this)}\r\n                key={i}\r\n                index={i}\r\n                 comment={comment}\r\n                 />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentList","import React,{Component} from 'react'\r\nimport CommentInput from './CommentInput'\r\nimport CommentList from './CommentList'\r\nimport './index.css'\r\n\r\nclass CommentApp extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            comments:[]\r\n        }\r\n    }\r\n    componentWillMount(){\r\n        this._loadComments()\r\n    }\r\n    _loadComments(){\r\n        let comments =localStorage.getItem('comments')\r\n        if(comments){\r\n            comments = JSON.parse(comments)\r\n            this.setState({comments})\r\n        }\r\n    }\r\n    _saveComments(comments){\r\n        localStorage.setItem('comments',JSON.stringify(comments))\r\n    }\r\n    handleSubmitComment(comment){\r\n        if(!comment)return\r\n        if(!comment.username)return alert('请输入用户名')\r\n        if(!comment.content)return alert('请输入内容')\r\n        const comments = this.state.comments\r\n        comments.push(comment)\r\n        this.setState({comments})\r\n        this._saveComments(comments)\r\n    }\r\n    handleDeleteComment(index){\r\n        const comments = this.state.comments\r\n        comments.splice(index,1)\r\n        this.setState({comments})\r\n        this._saveComments(comments)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <CommentInput \r\n                onSubmit={this.handleSubmitComment.bind(this)}\r\n                />\r\n                <CommentList \r\n                comments={this.state.comments}\r\n                onDeleteComment={this.handleDeleteComment.bind(this)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CommentApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CommentApp from './CommentApp';\n\nReactDOM.render(<CommentApp />, document.getElementById('root'));\n"],"sourceRoot":""}